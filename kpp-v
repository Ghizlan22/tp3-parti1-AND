import numpy as np

# Données des classes A et B
classe_A = np.array([[1, 2], [2, 3], [3, 3]])
classe_B = np.array([[6, 5], [7, 8], [8, 8]])

# Points à tester (classe T)
classe_T = np.array([[2, 1], [5, 5], [7, 6]])

# Fonction de calcul de la distance harmonique
def distance_harmonique(p1, p2):
    return np.sum(np.abs(p1 - p2))

# Fonction de classification avec K variable
def kppv_classification(T, A, B, k):
    resultats = []
    
    for t in T:
        distances = []
        for a in A:
            distances.append((distance_harmonique(t, a), 'A'))
        for b in B:
            distances.append((distance_harmonique(t, b), 'B'))
        
        distances.sort()  # Trie par distance croissante
        voisins_proches = distances[:k]  # Prend les k premiers voisins
        
        classes = [v[1] for v in voisins_proches]  # Liste des classes
        vote = max(set(classes), key=classes.count)  # Classe la plus fréquente
        
        resultats.append(vote)
    
    return resultats

# Entrée de l'utilisateur pour K
k = int(input("Entrez la valeur de K : "))

# Classification des points de T
resultats = kppv_classification(classe_T, classe_A, classe_B, k)

# Affichage des résultats
for i, res in enumerate(resultats):
    print(f'Point {classe_T[i]} classé dans la classe: {res}')
